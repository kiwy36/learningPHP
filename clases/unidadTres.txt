# üíæ UNIDAD 3 - OPERACIONES CRUD (B√ÅSICAS Y FUNDAMENTALES)

¬°Perfecto! Ahora vamos con lo m√°s importante: c√≥mo trabajar con los datos. Las operaciones CRUD (Create, Read, Update, Delete) son el coraz√≥n de cualquier aplicaci√≥n con base de datos.

## 3.1 INSERTAR DATOS

### 3a. Sintaxis INSERT INTO

**La estructura b√°sica:**
```sql
INSERT INTO nombre_tabla (columna1, columna2, columna3, ...)
VALUES (valor1, valor2, valor3, ...);
```

### 3b. Insertar Uno o Varios Registros

**Insertar un solo registro:**
```sql
INSERT INTO clientes (nombre, email, telefono, edad)
VALUES ('Ana Garc√≠a', 'ana@email.com', '600111222', 25);
```

**Insertar m√∫ltiples registros en un solo comando:**
```sql
INSERT INTO clientes (nombre, email, telefono, edad)
VALUES 
('Carlos L√≥pez', 'carlos@email.com', '600333444', 30),
('Mar√≠a Rodr√≠guez', 'maria@email.com', '600555666', 28),
('Pedro S√°nchez', 'pedro@email.com', '600777888', 35);
```

**Ejemplo con tabla productos:**
```sql
CREATE TABLE productos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    precio DECIMAL(10, 2),
    stock INT DEFAULT 0,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insertar productos
INSERT INTO productos (nombre, precio, stock)
VALUES
('Laptop HP', 899.99, 15),
('Mouse Inal√°mbrico', 25.50, 100),
('Teclado Mec√°nico', 89.99, 30),
('Monitor 24"', 199.99, 20);
```

### 3c. Buenas Pr√°cticas para Campos NULL o DEFAULT

**Cuando no especificamos todos los campos:**
```sql
-- Tabla con campos opcionales y defaults
CREATE TABLE usuarios (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    activo BOOLEAN DEFAULT TRUE,
    fecha_registro DATESTAMP DEFAULT CURRENT_DATE,
    telefono VARCHAR(15) NULL,
    direccion TEXT NULL
);

-- Insertar especificando s√≥lo campos obligatorios
INSERT INTO usuarios (username, email)
VALUES ('anagarcia', 'ana@email.com');

-- Insertar con algunos campos opcionales
INSERT INTO usuarios (username, email, telefono)
VALUES ('carlosl', 'carlos@email.com', '600111222');

-- Ver resultado (los defaults se aplican autom√°ticamente)
SELECT * FROM usuarios;
```

## 3.2 CONSULTAR DATOS

### 3a. SELECT * FROM

**Consultar todos los registros y todas las columnas:**
```sql
SELECT * FROM clientes;
```

**Consultar columnas espec√≠ficas:**
```sql
SELECT nombre, email, telefono FROM clientes;
```

**Usar alias para columnas:**
```sql
SELECT 
    nombre AS 'Nombre Completo',
    email AS 'Correo Electr√≥nico',
    telefono AS 'Tel√©fono de Contacto'
FROM clientes;
```

### 3b. Filtrar con WHERE

**Filtros b√°sicos:**
```sql
-- Clientes mayores de 25 a√±os
SELECT * FROM clientes WHERE edad > 25;

-- Cliente con email espec√≠fico
SELECT * FROM clientes WHERE email = 'ana@email.com';

-- Clientes que no tienen tel√©fono
SELECT * FROM clientes WHERE telefono IS NULL;
```

**M√∫ltiples condiciones:**
```sql
-- Clientes entre 25 y 35 a√±os
SELECT * FROM clientes WHERE edad BETWEEN 25 AND 35;

-- Clientes de ciertas ciudades
SELECT * FROM clientes WHERE ciudad IN ('Madrid', 'Barcelona', 'Valencia');

-- Clientes que empiezan con 'A'
SELECT * FROM clientes WHERE nombre LIKE 'A%';

-- Combinar condiciones
SELECT * FROM clientes 
WHERE edad > 25 AND ciudad = 'Madrid' AND telefono IS NOT NULL;
```

### 3c. Ordenar con ORDER BY

**Ordenamiento simple:**
```sql
-- Ordenar por nombre (A-Z)
SELECT * FROM clientes ORDER BY nombre ASC;

-- Ordenar por edad (mayor a menor)
SELECT * FROM clientes ORDER BY edad DESC;
```

**Ordenamiento m√∫ltiple:**
```sql
-- Primero por ciudad, luego por nombre alfab√©ticamente
SELECT * FROM clientes ORDER BY ciudad ASC, nombre ASC;

-- Productos m√°s caros primero, luego por nombre
SELECT * FROM productos ORDER BY precio DESC, nombre ASC;
```

### 3d. Limitar Resultados con LIMIT

**Limitar cantidad de resultados:**
```sql
-- Primeros 5 clientes
SELECT * FROM clientes LIMIT 5;

-- Clientes 6 al 10 (paginaci√≥n)
SELECT * FROM clientes LIMIT 5 OFFSET 5;
-- o equivalente:
SELECT * FROM clientes LIMIT 5, 5;
```

**Combinar con ORDER BY:**
```sql
-- Los 3 productos m√°s caros
SELECT * FROM productos ORDER BY precio DESC LIMIT 3;

-- Los 5 clientes m√°s j√≥venes
SELECT * FROM clientes ORDER BY edad ASC LIMIT 5;
```

## 3.3 ACTUALIZAR DATOS

### 3a. UPDATE con Condici√≥n WHERE

**Sintaxis b√°sica:**
```sql
UPDATE nombre_tabla
SET columna1 = nuevo_valor1, columna2 = nuevo_valor2, ...
WHERE condici√≥n;
```

**Ejemplos pr√°cticos:**
```sql
-- Actualizar el tel√©fono de un cliente espec√≠fico
UPDATE clientes 
SET telefono = '611222333' 
WHERE email = 'ana@email.com';

-- Aumentar el precio de todos los productos en un 10%
UPDATE productos 
SET precio = precio * 1.10;

-- Cambiar el estado de varios clientes
UPDATE clientes 
SET activo = FALSE 
WHERE fecha_ultima_compra < '2023-01-01';
```

### 3b. Evitar Errores: Sin WHERE Borra Todo

**¬°PELIGRO! Sin WHERE se actualizan TODOS los registros:**
```sql
-- ¬°CUIDADO! Esto cambia el tel√©fono de TODOS los clientes
UPDATE clientes SET telefono = '600000000';

-- Siempre verificar el WHERE primero con SELECT
SELECT * FROM clientes WHERE email = 'ana@email.com'; -- Verificar
UPDATE clientes SET telefono = '611222333' WHERE email = 'ana@email.com'; -- Ejecutar
```

### 3c. Actualizaci√≥n Masiva vs Individual

**Actualizaci√≥n individual:**
```sql
-- Por ID (la forma m√°s segura)
UPDATE productos SET stock = 50 WHERE id = 1;

-- Por campo √∫nico
UPDATE usuarios SET activo = FALSE WHERE username = 'usuario_inactivo';
```

**Actualizaci√≥n masiva:**
```sql
-- Reactivar todos los clientes inactivos de Madrid
UPDATE clientes 
SET activo = TRUE 
WHERE ciudad = 'Madrid' AND activo = FALSE;

-- Aplicar descuento a productos de una categor√≠a
UPDATE productos 
SET precio = precio * 0.9  -- 10% de descuento
WHERE categoria = 'Electr√≥nicos';
```

## 3.4 ELIMINAR DATOS

### 3a. DELETE FROM con WHERE

**Eliminar registros espec√≠ficos:**
```sql
DELETE FROM nombre_tabla WHERE condici√≥n;
```

**Ejemplos:**
```sql
-- Eliminar un cliente espec√≠fico
DELETE FROM clientes WHERE id = 5;

-- Eliminar productos sin stock
DELETE FROM productos WHERE stock = 0;

-- Eliminar usuarios inactivos hace m√°s de 1 a√±o
DELETE FROM usuarios 
WHERE activo = FALSE AND ultima_conexion < '2023-01-01';
```

### 3b. Eliminar Todos los Registros

**¬°MUCHO CUIDADO! Estas opciones eliminan TODO:**
```sql
-- Elimina todos los registros pero mantiene la estructura
DELETE FROM clientes;

-- M√°s r√°pido, tambi√©n elimina todo
TRUNCATE TABLE clientes;
```

### 3c. Truncar Tabla vs Eliminar Registros

**DELETE FROM:**
- Elimina registros uno por uno
- Se puede usar con WHERE
- Se pueden recuperar con ROLLBACK (en transacciones)
- M√°s lento en tablas grandes

**TRUNCATE TABLE:**
- Elimina todos los registros de golpe
- No se puede usar con WHERE
- No se puede recuperar
- M√°s r√°pido y libera espacio
- Reinicia los auto_increment

**Comparaci√≥n:**
```sql
-- DELETE (m√°s control)
DELETE FROM log_errores WHERE fecha < '2023-01-01'; -- Eliminar s√≥lo algunos

-- TRUNCATE (m√°s r√°pido para limpiar toda la tabla)
TRUNCATE TABLE temp_data; -- Eliminar todo r√°pidamente
```

## üéØ EJERCICIOS PR√ÅCTICOS

### Ejercicio 1: Insertar y Consultar
```sql
-- Crear tabla
CREATE TABLE empleados (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    departamento VARCHAR(50),
    salario DECIMAL(10, 2),
    fecha_contratacion DATE
);

-- Insertar datos
INSERT INTO empleados (nombre, departamento, salario, fecha_contratacion)
VALUES
('Ana Garc√≠a', 'Ventas', 35000.00, '2022-03-15'),
('Carlos L√≥pez', 'IT', 45000.00, '2021-06-10'),
('Mar√≠a Rodr√≠guez', 'Ventas', 32000.00, '2023-01-20'),
('Pedro S√°nchez', 'Marketing', 38000.00, '2020-11-05');

-- Consultas
SELECT * FROM empleados WHERE departamento = 'Ventas';
SELECT nombre, salario FROM empleados ORDER BY salario DESC;
SELECT * FROM empleados WHERE salario > 35000 LIMIT 2;
```

### Ejercicio 2: Actualizar y Eliminar
```sql
-- Aumentar salario a empleados de Ventas
UPDATE empleados 
SET salario = salario * 1.10 
WHERE departamento = 'Ventas';

-- Cambiar departamento
UPDATE empleados 
SET departamento = 'Digital' 
WHERE nombre = 'Pedro S√°nchez';

-- Eliminar empleados con salario muy bajo
DELETE FROM empleados WHERE salario < 30000;

-- Ver resultados
SELECT * FROM empleados;
```

## üìã RESUMEN VISUAL CRUD

```
OPERACIONES CRUD
‚îÇ
‚îú‚îÄ‚îÄ CREATE (Crear)
‚îÇ   ‚îî‚îÄ‚îÄ INSERT INTO ‚Üí Agregar nuevos registros
‚îÇ
‚îú‚îÄ‚îÄ READ (Leer)
‚îÇ   ‚îî‚îÄ‚îÄ SELECT ‚Üí Consultar datos con filtros, orden y l√≠mites
‚îÇ
‚îú‚îÄ‚îÄ UPDATE (Actualizar)
‚îÇ   ‚îî‚îÄ‚îÄ UPDATE ‚Üí Modificar registros existentes (¬°SIEMPRE con WHERE!)
‚îÇ
‚îî‚îÄ‚îÄ DELETE (Eliminar)
    ‚îî‚îÄ‚îÄ DELETE ‚Üí Eliminar registros (¬°SIEMPRE con WHERE!)
    ‚îî‚îÄ‚îÄ TRUNCATE ‚Üí Vaciar tabla completamente
```

## üöÄ PR√ìXIMOS PASOS

Ahora dominas las operaciones b√°sicas CRUD. En la siguiente unidad aprenderemos:
- Consultas m√°s avanzadas con JOINs
- Funciones de agregaci√≥n (COUNT, SUM, AVG)
- Agrupamiento de datos con GROUP BY
- Consultas complejas con subconsultas