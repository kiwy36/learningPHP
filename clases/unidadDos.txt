# 📊 UNIDAD 2 - TABLAS Y ESTRUCTURAS BÁSICAS
## 2.1 CREAR TABLAS

### 2a. Concepto de Tabla, Campos, Filas y Columnas

**Analogía: Una tabla es como una hoja de cálculo de Excel**

| Concepto      | En Excel      | En MySQL         | Ejemplo          |
|---------------|---------------|------------------|------------------|
| **Tabla**     | Hoja de cálculo | CREATE TABLE    | `clientes`       |
| **Campo**     | Encabezado columna | Columna definida | `nombre`, `edad` |
| **Fila**      | Fila de datos  | Registro         | Datos de 1 cliente |
| **Columna**   | Columna        | Campo/Atributo   | Todos los nombres |

**Ejemplo visual:**
```sql
-- TABLA: estudiantes
+----+-----------+-----+------------+
| id | nombre    | edad| ciudad     |  ← Campos/Columnas
+----+-----------+-----+------------+
| 1  | Ana       | 20  | Madrid     |  ← Fila/Registro 1
| 2  | Carlos    | 22  | Barcelona  |  ← Fila/Registro 2
| 3  | Elena     | 21  | Valencia   |  ← Fila/Registro 3
+----+-----------+-----+------------+
```

### 2b. Tipos de Datos Comunes

Cada campo debe tener un tipo de dato específico:

**Numéricos:**
- `INT` - Números enteros: `edad INT`
- `DECIMAL(m, n)` - Números decimales: `precio DECIMAL(10, 2)`
- `FLOAT` - Números con punto flotante: `temperatura FLOAT`

**Texto:**
- `VARCHAR(n)` - Texto de longitud variable (hasta 255): `nombre VARCHAR(100)`
- `CHAR(n)` - Texto de longitud fija: `codigo CHAR(5)`
- `TEXT` - Textos largos: `descripcion TEXT`

**Fechas:**
- `DATE` - Fecha (YYYY-MM-DD): `fecha_nacimiento DATE`
- `DATETIME` - Fecha y hora: `fecha_registro DATETIME`
- `TIMESTAMP` - Marca de tiempo: `ultimo_acceso TIMESTAMP`

**Booleanos:**
- `BOOLEAN` o `TINYINT(1)` - Verdadero/Falso: `activo BOOLEAN`

**Ejemplos prácticos:**
```sql
CREATE TABLE usuarios (
    id INT,
    nombre VARCHAR(50),
    email VARCHAR(100),
    edad INT,
    activo BOOLEAN,
    fecha_registro DATE,
    salario DECIMAL(10, 2)
);
```

### 2c. Clave Primaria (PRIMARY KEY) y Auto Incrementos (AUTO_INCREMENT)

**PRIMARY KEY (Clave Primaria):**
- Identificador único de cada registro
- No se puede repetir
- No puede ser NULL

**AUTO_INCREMENT:**
- MySQL automáticamente asigna el siguiente número disponible
- Ideal para campos ID

**Ejemplo:**
```sql
CREATE TABLE productos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    precio DECIMAL(10, 2),
    stock INT DEFAULT 0
);
```

**¿Por qué usarlos?**
```sql
-- SIN primary key (problemas)
INSERT INTO productos VALUES (1, 'Laptop', 999.99, 10);
INSERT INTO productos VALUES (1, 'Tablet', 299.99, 5); -- ¡ERROR! ID repetido

-- CON primary key y auto_increment (solución)
INSERT INTO productos (nombre, precio, stock) VALUES ('Laptop', 999.99, 10);
-- MySQL asigna automáticamente id=1
INSERT INTO productos (nombre, precio, stock) VALUES ('Tablet', 299.99, 5);
-- MySQL asigna automáticamente id=2
```

## 2.2 MODIFICAR TABLAS

### 2a. Agregar, Modificar o Borrar Columnas

**Agregar columna:**
```sql
ALTER TABLE estudiantes ADD COLUMN telefono VARCHAR(15);
```

**Modificar columna:**
```sql
-- Cambiar tipo de dato
ALTER TABLE estudiantes MODIFY COLUMN telefono VARCHAR(20);

-- Cambiar nombre de columna
ALTER TABLE estudiantes CHANGE COLUMN telefono movil VARCHAR(20);
```

**Eliminar columna:**
```sql
ALTER TABLE estudiantes DROP COLUMN movil;
```

**Ejemplo completo:**
```sql
-- Tabla inicial
CREATE TABLE empleados (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100)
);

-- Agregar columna
ALTER TABLE empleados ADD COLUMN salario DECIMAL(10, 2);

-- Modificar columna
ALTER TABLE empleados MODIFY COLUMN salario DECIMAL(12, 2);

-- Eliminar columna
ALTER TABLE empleados DROP COLUMN salario;
```

### 2b. Tipos de Restricciones (CONSTRAINTS)

Las restricciones definen reglas para los datos:

**NOT NULL - El campo no puede estar vacío:**
```sql
CREATE TABLE clientes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,  -- Obligatorio
    email VARCHAR(100) NOT NULL    -- Obligatorio
);
```

**UNIQUE - El valor debe ser único en la tabla:**
```sql
CREATE TABLE usuarios (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE,   -- No se puede repetir
    email VARCHAR(100) UNIQUE      -- No se puede repetir
);
```

**DEFAULT - Valor por defecto si no se especifica:**
```sql
CREATE TABLE pedidos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    fecha_pedido DATETIME DEFAULT CURRENT_TIMESTAMP,
    estado VARCHAR(20) DEFAULT 'pendiente',
    cantidad INT DEFAULT 1
);
```

**CHECK - Verificar condiciones personalizadas:**
```sql
CREATE TABLE productos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100),
    precio DECIMAL(10, 2) CHECK (precio > 0),  -- Precio debe ser positivo
    stock INT CHECK (stock >= 0)               -- Stock no puede ser negativo
);
```

**Ejemplo con múltiples restricciones:**
```sql
CREATE TABLE empleados (
    id INT PRIMARY KEY AUTO_INCREMENT,
    dni VARCHAR(10) UNIQUE NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    salario DECIMAL(10, 2) CHECK (salario >= 0),
    fecha_contratacion DATE DEFAULT (CURRENT_DATE),
    activo BOOLEAN DEFAULT TRUE
);
```

### 2c. Eliminar Tablas o Bases de Datos (¡CON CUIDADO!)

**Eliminar tabla:**
```sql
-- ¡CUIDADO! Esto borra la tabla y todos sus datos
DROP TABLE nombre_tabla;

-- Ejemplo:
DROP TABLE clientes_temp;
```

**Eliminar base de datos:**
```sql
-- ¡MUCHO CUIDADO! Borra toda la base de datos
DROP DATABASE nombre_base_datos;

-- Ejemplo:
DROP DBABASE prueba_temp;
```

**Buenas prácticas:**
1. Siempre hacer backup antes de eliminar
2. Verificar dos veces el nombre
3. Usar transacciones si es posible

**Alternativa más segura:**
```sql
-- Primero verificar qué vamos a eliminar
SHOW TABLES;
SHOW DATABASES;

-- Luego eliminar
DROP TABLE IF EXISTS tabla_temp;  -- Sólo elimina si existe
```

## 🎯 EJERCICIOS PRÁCTICOS

### Ejercicio 1: Crear Tabla de Estudiantes
```sql
CREATE TABLE estudiantes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    dni VARCHAR(10) UNIQUE NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE,
    email VARCHAR(150) UNIQUE,
    telefono VARCHAR(15),
    activo BOOLEAN DEFAULT TRUE
);
```

### Ejercicio 2: Modificar la Tabla
```sql
-- Agregar columna
ALTER TABLE estudiantes ADD COLUMN direccion TEXT;

-- Modificar columna
ALTER TABLE estudiantes MODIFY COLUMN telefono VARCHAR(20);

-- Agregar restricción
ALTER TABLE estudiantes ADD CONSTRAINT email_unico UNIQUE (email);

-- Agregar columna con valor por defecto
ALTER TABLE estudiantes ADD COLUMN fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP;
```

### Ejercicio 3: Insertar Datos con Diferentes Tipos
```sql
INSERT INTO estudiantes (dni, nombre, apellido, fecha_nacimiento, email, telefono)
VALUES 
('12345678A', 'María', 'Gómez', '2000-05-15', 'maria@email.com', '+34 600 111 222'),
('87654321B', 'Pedro', 'López', '1999-12-20', 'pedro@email.com', '+34 600 333 444');

-- Verificar que auto_increment y defaults funcionan
SELECT * FROM estudiantes;
```

## 📋 RESUMEN VISUAL

```
TABLAS EN MySQL
│
├── ESTRUCTURA
│   ├── Campos (columnas) con tipos de datos
│   ├── Filas (registros) con datos
│   └── Restricciones (reglas)
│
├── TIPOS DE DATOS
│   ├── INT, VARCHAR, TEXT, DATE, BOOLEAN...
│   └── DECIMAL, FLOAT, DATETIME...
│
├── RESTRICCIONES
│   ├── PRIMARY KEY (identificador único)
│   ├── AUTO_INCREMENT (numeración automática)
│   ├── NOT NULL (campo obligatorio)
│   ├── UNIQUE (valores únicos)
│   └── DEFAULT (valor por defecto)
│
└── MODIFICACIONES
    ├── ALTER TABLE (agregar/modificar/eliminar columnas)
    └── DROP TABLE/DATABASE (eliminar con cuidado)
```

## 🚀 PRÓXIMOS PASOS

Ahora que sabes crear y modificar tablas, en la siguiente unidad aprenderemos:
- Insertar datos en las tablas
- Consultar y filtrar información
- Actualizar y eliminar registros
