## üü¶ UNIDAD 2 ‚Äì TABLAS Y ESTRUCTURAS B√ÅSICAS

### 2.1 CREAR TABLAS

---

### ‚úÖ 2a. Concepto de tabla, campos, filas y columnas

En bases de datos, una **tabla** es una estructura que almacena informaci√≥n organizada en **columnas** (tambi√©n llamadas campos) y **filas** (tambi√©n llamadas registros).

* **Tabla**: es un conjunto de datos relacionados, almacenados de forma estructurada.
* **Campos o columnas**: cada campo define una categor√≠a de datos, como ‚Äúnombre‚Äù, ‚Äúedad‚Äù o ‚Äúprecio‚Äù.
* **Filas o registros**: cada fila contiene un conjunto de valores que representan una instancia concreta, como una persona, producto o pedido.

Pod√©s imaginarlo como una hoja de Excel:

* Las columnas son los t√≠tulos de cada dato.
* Las filas son los datos reales, una por cada √≠tem o persona.

#### üß™ Ejemplo pr√°ctico:

```sql
CREATE TABLE empleados (
  id INT,
  nombre VARCHAR(100),
  edad INT,
  email VARCHAR(100)
);
```

Aqu√≠ cre√°s una tabla llamada `empleados` con 4 columnas:

* `id`: n√∫mero identificador.
* `nombre`: texto de hasta 100 caracteres.
* `edad`: n√∫mero entero.
* `email`: texto.

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

Cre√° una tabla llamada `cursos` con los siguientes campos:

* `id` (INT)
* `nombre` (VARCHAR(150))
* `duracion` (INT, en horas)

```sql
CREATE TABLE cursos (
  id INT,
  nombre VARCHAR(150),
  duracion INT
);
```

---

### ‚úÖ 2b. Tipos de datos (INT, VARCHAR, TEXT, DATE, BOOLEAN, etc.)

Al crear una tabla, es necesario definir **el tipo de dato** para cada campo. Esto le indica a MySQL qu√© clase de informaci√≥n esperar.

#### üî∏ Tipos de datos m√°s comunes:

| Tipo                      | Descripci√≥n                        | Ejemplo de uso             |
| ------------------------- | ---------------------------------- | -------------------------- |
| `INT`                     | N√∫meros enteros                    | edad, cantidad             |
| `DECIMAL(10,2)` o `FLOAT` | N√∫meros con decimales              | precios, puntajes          |
| `VARCHAR(n)`              | Texto corto (hasta `n` caracteres) | nombres, correos           |
| `TEXT`                    | Texto largo (sin l√≠mite definido)  | descripciones, comentarios |
| `DATE`                    | Fecha (formato YYYY-MM-DD)         | fecha de nacimiento        |
| `DATETIME`                | Fecha y hora                       | registros de eventos       |
| `BOOLEAN` o `TINYINT(1)`  | Valor verdadero (1) o falso (0)    | activo/inactivo, aprobado  |

#### üß™ Ejemplo:

```sql
CREATE TABLE productos (
  id INT,
  nombre VARCHAR(100),
  descripcion TEXT,
  precio DECIMAL(10,2),
  disponible BOOLEAN,
  fecha_ingreso DATE
);
```

Esta tabla guarda productos con nombre, descripci√≥n, precio, si est√° disponible o no, y cu√°ndo fue ingresado.

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

Cre√° una tabla `alumnos` con los campos:

* `id` (INT)
* `nombre` (VARCHAR 100)
* `aprobado` (BOOLEAN)
* `ingreso` (DATE)

```sql
CREATE TABLE alumnos (
  id INT,
  nombre VARCHAR(100),
  aprobado BOOLEAN,
  ingreso DATE
);
```

---

### ‚úÖ 2c. Clave primaria (PRIMARY KEY) y auto incrementos (AUTO\_INCREMENT)

Una **clave primaria** (PRIMARY KEY) identifica de forma √∫nica cada fila dentro de una tabla. Es un campo obligatorio, √∫nico y no puede contener valores `NULL`.

El modificador **AUTO\_INCREMENT** permite que MySQL aumente autom√°ticamente el valor de ese campo en cada nueva fila.

#### üß™ Ejemplo:

```sql
CREATE TABLE clientes (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100),
  email VARCHAR(100)
);
```

Esto significa que cada nuevo cliente tendr√° un `id` autom√°tico que comienza en 1 y aumenta en 1 con cada inserci√≥n.

#### ‚ö†Ô∏è Importancia:

* Evita duplicados.
* Facilita relaciones entre tablas.
* Garantiza la integridad de los datos.

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

Cre√° una tabla `categorias` con:

* `id` como clave primaria y autoincrementable.
* `nombre` como campo de texto.

```sql
CREATE TABLE categorias (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100)
);
```

Agreg√° dos categor√≠as:

```sql
INSERT INTO categorias (nombre) VALUES ('Electr√≥nica'), ('Hogar');
```

‚úÖ Resultado esperado:

| id | nombre      |
| -- | ----------- |
| 1  | Electr√≥nica |
| 2  | Hogar       |

---

Cuando quieras, seguimos con la **Unidad 2.2** o cualquier otro tema que necesites. ¬øQuer√©s que veamos c√≥mo insertar datos o c√≥mo hacer relaciones entre tablas?

////////////////////////////////////////////////////////////////////

## üü¶ UNIDAD 2.2 ‚Äì MODIFICAR TABLAS

---

### ‚úÖ 2a. Agregar, modificar o borrar columnas

Las tablas se pueden modificar f√°cilmente con el comando `ALTER TABLE`. Este permite:

#### üü¢ Agregar una columna:

```sql
ALTER TABLE productos ADD marca VARCHAR(100);
```

Esto agrega una columna llamada `marca` al final de la tabla `productos`.

#### üü° Modificar una columna:

```sql
ALTER TABLE productos MODIFY marca VARCHAR(150);
```

Esto cambia el tipo o tama√±o de la columna `marca`.

#### üî¥ Borrar una columna:

```sql
ALTER TABLE productos DROP COLUMN marca;
```

Esto elimina completamente la columna.

#### üß™ Ejercicio:

1. Creamos una tabla simple:

```sql
CREATE TABLE libros (
  id INT PRIMARY KEY AUTO_INCREMENT,
  titulo VARCHAR(100)
);
```

2. Agregamos una columna `autor`:

```sql
ALTER TABLE libros ADD autor VARCHAR(100);
```

3. Modificamos la columna `autor` para aumentar su tama√±o:

```sql
ALTER TABLE libros MODIFY autor VARCHAR(200);
```

4. Borramos la columna:

```sql
ALTER TABLE libros DROP COLUMN autor;
```

---

### ‚úÖ 2b. Tipos de restricciones (`NOT NULL`, `UNIQUE`, `DEFAULT`)

Las **restricciones** controlan c√≥mo se insertan y mantienen los datos en las tablas.

#### üî∏ `NOT NULL`:

Evita que una columna tenga valores vac√≠os.

```sql
nombre VARCHAR(100) NOT NULL
```

#### üî∏ `UNIQUE`:

Impide que se repitan valores en esa columna.

```sql
email VARCHAR(100) UNIQUE
```

#### üî∏ `DEFAULT`:

Asigna un valor por defecto si no se especifica otro.

```sql
activo BOOLEAN DEFAULT TRUE
```

#### üß™ Ejemplo completo:

```sql
CREATE TABLE usuarios (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100) NOT NULL,
  email VARCHAR(100) UNIQUE,
  registrado DATE DEFAULT CURRENT_DATE
);
```

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

Modific√° la tabla `libros` para agregar una columna `precio` con valor por defecto de 100:

```sql
ALTER TABLE libros ADD precio DECIMAL(10,2) DEFAULT 100.00;
```

---

### ‚úÖ 2c. Eliminar tablas o bases de datos (con cuidado)

‚ö†Ô∏è ¬°Estas operaciones borran datos para siempre!

#### üî• Eliminar una tabla:

```sql
DROP TABLE productos;
```

#### üî• Eliminar una base de datos:

```sql
DROP DATABASE tienda;
```

#### üß™ Buenas pr√°cticas:

* Revisar bien los nombres.
* Hacer respaldo si es necesario.
* Asegurarte de no tener relaciones activas con otras tablas.

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

Elimin√° una tabla temporal:

```sql
CREATE TABLE temporal (id INT);
DROP TABLE temporal;
```

---

### ‚úÖ 2d. Insertar datos

Una vez creada la tabla, se insertan datos con `INSERT INTO`.

#### üß™ Ejemplo:

```sql
INSERT INTO libros (titulo, precio) VALUES ('Cien a√±os de soledad', 1800.00);
```

Pod√©s insertar varios registros a la vez:

```sql
INSERT INTO libros (titulo, precio) VALUES 
('El Principito', 900.00),
('1984', 1200.50),
('Rayuela', 1500.00);
```

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

Insert√° 2 usuarios en la tabla `usuarios`:

```sql
INSERT INTO usuarios (nombre, email) VALUES 
('Juan P√©rez', 'juan@example.com'),
('Ana Garc√≠a', 'ana@example.com');
```

---

### ‚úÖ 2e. Hacer relaciones entre tablas

Una **relaci√≥n** permite conectar datos entre dos o m√°s tablas. Se hace con **llaves for√°neas** (`FOREIGN KEY`).

#### üìò Supongamos:

* Una tabla `categorias`.
* Una tabla `productos` que pertenece a una categor√≠a.

#### üß™ Paso a paso:

1. Crear la tabla `categorias`:

```sql
CREATE TABLE categorias (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100)
);
```

2. Crear la tabla `productos` con relaci√≥n:

```sql
CREATE TABLE productos (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100),
  categoria_id INT,
  FOREIGN KEY (categoria_id) REFERENCES categorias(id)
);
```

Ahora, cada producto queda asociado a una categor√≠a espec√≠fica por `categoria_id`.

#### üß™ Insertar datos:

```sql
INSERT INTO categorias (nombre) VALUES ('Electr√≥nica'), ('Ropa');

INSERT INTO productos (nombre, categoria_id) 
VALUES ('Smartphone', 1), ('Campera', 2);
```

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

1. Crear una tabla `clientes`.
2. Crear una tabla `pedidos` que tenga un `cliente_id` que se relacione con la tabla `clientes`.

```sql
CREATE TABLE clientes (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100)
);

CREATE TABLE pedidos (
  id INT PRIMARY KEY AUTO_INCREMENT,
  producto VARCHAR(100),
  cliente_id INT,
  FOREIGN KEY (cliente_id) REFERENCES clientes(id)
);

Perfecto ‚úÖ
Vamos a desarrollar **la UNIDAD 2 ‚Äì TABLAS Y ESTRUCTURAS B√ÅSICAS** con explicaciones detalladas, ejemplos y ejercicios.

---

## **UNIDAD 2 ‚Äì TABLAS Y ESTRUCTURAS B√ÅSICAS**

---

### **2.1 Crear tablas**

En MySQL, las **tablas** son la estructura principal para almacenar datos.
Una tabla es como una hoja de c√°lculo:

* **Filas** (rows): cada una es un registro completo.
* **Columnas** (columns o campos): cada una almacena un tipo espec√≠fico de dato (n√∫mero, texto, fecha, etc.).

Para crear una tabla se usa el comando **`CREATE TABLE`**, especificando el nombre de la tabla y la definici√≥n de cada columna.

Ejemplo b√°sico:

```sql
CREATE TABLE clientes (
    id_cliente INT AUTO_INCREMENT,
    nombre VARCHAR(50),
    email VARCHAR(100),
    PRIMARY KEY (id_cliente)
);
```

En este ejemplo:

* `clientes` es el nombre de la tabla.
* `id_cliente`, `nombre` y `email` son columnas.
* `PRIMARY KEY (id_cliente)` indica que **id\_cliente** es √∫nico para cada registro.
* `AUTO_INCREMENT` hace que MySQL asigne autom√°ticamente un valor incremental al nuevo registro.

---

### **2a. Concepto de tabla, campos, filas y columnas**

1. **Tabla** ‚Üí Conjunto estructurado de datos organizados en filas y columnas.
2. **Campos** ‚Üí Definen el tipo de informaci√≥n que guarda cada columna.
3. **Columnas** ‚Üí Contienen un √∫nico tipo de dato para todos los registros.
4. **Filas** ‚Üí Cada fila es un registro individual.

üìå Ejemplo visual:

| id\_cliente | nombre | email                                     |
| ----------- | ------ | ----------------------------------------- |
| 1           | Laura  | [laura@mail.com](mailto:laura@mail.com)   |
| 2           | Mart√≠n | [martin@mail.com](mailto:martin@mail.com) |
| 3           | Andrea | [andrea@mail.com](mailto:andrea@mail.com) |

---

### **2b. Tipos de datos m√°s comunes en MySQL**

Al crear columnas, se debe especificar **el tipo de dato**.
Los m√°s comunes son:

| Tipo de dato             | Descripci√≥n                                     | Ejemplo             |
| ------------------------ | ----------------------------------------------- | ------------------- |
| `INT`                    | N√∫meros enteros                                 | 25, -100, 5000      |
| `DECIMAL(m,n)`           | N√∫meros decimales precisos                      | 45.67               |
| `VARCHAR(n)`             | Texto de longitud variable hasta `n` caracteres | 'Kevin'             |
| `TEXT`                   | Texto largo (hasta 65,535 caracteres)           | 'Comentario...'     |
| `DATE`                   | Fecha (formato AAAA-MM-DD)                      | 2025-08-14          |
| `DATETIME`               | Fecha y hora                                    | 2025-08-14 22:15:00 |
| `BOOLEAN` o `TINYINT(1)` | Verdadero (1) o Falso (0)                       | 1                   |

Ejemplo de tabla usando varios tipos:

```sql
CREATE TABLE productos (
    id_producto INT AUTO_INCREMENT,
    nombre VARCHAR(100),
    descripcion TEXT,
    precio DECIMAL(10,2),
    fecha_creacion DATE,
    en_stock BOOLEAN,
    PRIMARY KEY (id_producto)
);
```

---

### **2c. Clave primaria (PRIMARY KEY) y auto incrementos (AUTO\_INCREMENT)**

#### **PRIMARY KEY**

* Es un campo o combinaci√≥n de campos que identifica **√∫nicamente** a cada fila de la tabla.
* No puede haber valores repetidos ni valores `NULL`.

Ejemplo:

```sql
PRIMARY KEY (id_cliente)
```

#### **AUTO\_INCREMENT**

* Hace que el valor de un campo num√©rico aumente autom√°ticamente cada vez que se inserta un nuevo registro.
* Solo se puede usar en columnas con tipo num√©rico (`INT`, `BIGINT`, etc.) y generalmente en claves primarias.

Ejemplo:

```sql
id_cliente INT AUTO_INCREMENT
```

üí° Usando ambos:

```sql
CREATE TABLE usuarios (
    id_usuario INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50),
    email VARCHAR(100)
);
```

---

### **Ejercicio pr√°ctico 1**

Crea una tabla llamada **mascotas** con las siguientes columnas:

* id\_mascota (entero, clave primaria, autoincremental)
* nombre (texto hasta 50 caracteres)
* especie (texto hasta 30 caracteres)
* fecha\_nacimiento (fecha)
* peso (decimal de 5 d√≠gitos, con 2 decimales)
* vacunado (booleano)

**Soluci√≥n:**

```sql
CREATE TABLE mascotas (
    id_mascota INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50),
    especie VARCHAR(30),
    fecha_nacimiento DATE,
    peso DECIMAL(5,2),
    vacunado BOOLEAN
);
```

---

### **Ejercicio pr√°ctico 2**

Agrega un registro de ejemplo a la tabla `mascotas`:

```sql
INSERT INTO mascotas (nombre, especie, fecha_nacimiento, peso, vacunado)
VALUES ('Luna', 'Perro', '2021-05-10', 12.50, 1);
```

üìå Esto insertar√°:

| id\_mascota | nombre | especie | fecha\_nacimiento | peso  | vacunado |
| ----------- | ------ | ------- | ----------------- | ----- | -------- |
| 1           | Luna   | Perro   | 2021-05-10        | 12.50 | 1        |

---

Si quieres, puedo prepararte **la UNIDAD 2 completa en SQL** lista para importar en MySQL y que puedas probar todos los ejemplos en tu base de datos.
¬øQuieres que lo haga as√≠ para que lo tengas todo listo para ejecutar?
