Perfecto, Kevin. Ac√° ten√©s toda la explicaci√≥n completa de la **UNIDAD 2 ‚Äì TABLAS Y ESTRUCTURAS B√ÅSICAS** (secci√≥n 2.1) con ejemplos y ejercicios, como pediste, sin el archivo `.txt`:

---

## üü¶ UNIDAD 2 ‚Äì TABLAS Y ESTRUCTURAS B√ÅSICAS

### 2.1 CREAR TABLAS

---

### ‚úÖ 2a. Concepto de tabla, campos, filas y columnas

En bases de datos, una **tabla** es una estructura que almacena informaci√≥n organizada en **columnas** (tambi√©n llamadas campos) y **filas** (tambi√©n llamadas registros).

* **Tabla**: es un conjunto de datos relacionados, almacenados de forma estructurada.
* **Campos o columnas**: cada campo define una categor√≠a de datos, como ‚Äúnombre‚Äù, ‚Äúedad‚Äù o ‚Äúprecio‚Äù.
* **Filas o registros**: cada fila contiene un conjunto de valores que representan una instancia concreta, como una persona, producto o pedido.

Pod√©s imaginarlo como una hoja de Excel:

* Las columnas son los t√≠tulos de cada dato.
* Las filas son los datos reales, una por cada √≠tem o persona.

#### üß™ Ejemplo pr√°ctico:

```sql
CREATE TABLE empleados (
  id INT,
  nombre VARCHAR(100),
  edad INT,
  email VARCHAR(100)
);
```

Aqu√≠ cre√°s una tabla llamada `empleados` con 4 columnas:

* `id`: n√∫mero identificador.
* `nombre`: texto de hasta 100 caracteres.
* `edad`: n√∫mero entero.
* `email`: texto.

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

Cre√° una tabla llamada `cursos` con los siguientes campos:

* `id` (INT)
* `nombre` (VARCHAR(150))
* `duracion` (INT, en horas)

```sql
CREATE TABLE cursos (
  id INT,
  nombre VARCHAR(150),
  duracion INT
);
```

---

### ‚úÖ 2b. Tipos de datos (INT, VARCHAR, TEXT, DATE, BOOLEAN, etc.)

Al crear una tabla, es necesario definir **el tipo de dato** para cada campo. Esto le indica a MySQL qu√© clase de informaci√≥n esperar.

#### üî∏ Tipos de datos m√°s comunes:

| Tipo                      | Descripci√≥n                        | Ejemplo de uso             |
| ------------------------- | ---------------------------------- | -------------------------- |
| `INT`                     | N√∫meros enteros                    | edad, cantidad             |
| `DECIMAL(10,2)` o `FLOAT` | N√∫meros con decimales              | precios, puntajes          |
| `VARCHAR(n)`              | Texto corto (hasta `n` caracteres) | nombres, correos           |
| `TEXT`                    | Texto largo (sin l√≠mite definido)  | descripciones, comentarios |
| `DATE`                    | Fecha (formato YYYY-MM-DD)         | fecha de nacimiento        |
| `DATETIME`                | Fecha y hora                       | registros de eventos       |
| `BOOLEAN` o `TINYINT(1)`  | Valor verdadero (1) o falso (0)    | activo/inactivo, aprobado  |

#### üß™ Ejemplo:

```sql
CREATE TABLE productos (
  id INT,
  nombre VARCHAR(100),
  descripcion TEXT,
  precio DECIMAL(10,2),
  disponible BOOLEAN,
  fecha_ingreso DATE
);
```

Esta tabla guarda productos con nombre, descripci√≥n, precio, si est√° disponible o no, y cu√°ndo fue ingresado.

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

Cre√° una tabla `alumnos` con los campos:

* `id` (INT)
* `nombre` (VARCHAR 100)
* `aprobado` (BOOLEAN)
* `ingreso` (DATE)

```sql
CREATE TABLE alumnos (
  id INT,
  nombre VARCHAR(100),
  aprobado BOOLEAN,
  ingreso DATE
);
```

---

### ‚úÖ 2c. Clave primaria (PRIMARY KEY) y auto incrementos (AUTO\_INCREMENT)

Una **clave primaria** (PRIMARY KEY) identifica de forma √∫nica cada fila dentro de una tabla. Es un campo obligatorio, √∫nico y no puede contener valores `NULL`.

El modificador **AUTO\_INCREMENT** permite que MySQL aumente autom√°ticamente el valor de ese campo en cada nueva fila.

#### üß™ Ejemplo:

```sql
CREATE TABLE clientes (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100),
  email VARCHAR(100)
);
```

Esto significa que cada nuevo cliente tendr√° un `id` autom√°tico que comienza en 1 y aumenta en 1 con cada inserci√≥n.

#### ‚ö†Ô∏è Importancia:

* Evita duplicados.
* Facilita relaciones entre tablas.
* Garantiza la integridad de los datos.

#### üèãÔ∏è‚Äç‚ôÇÔ∏è Ejercicio:

Cre√° una tabla `categorias` con:

* `id` como clave primaria y autoincrementable.
* `nombre` como campo de texto.

```sql
CREATE TABLE categorias (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(100)
);
```

Agreg√° dos categor√≠as:

```sql
INSERT INTO categorias (nombre) VALUES ('Electr√≥nica'), ('Hogar');
```

‚úÖ Resultado esperado:

| id | nombre      |
| -- | ----------- |
| 1  | Electr√≥nica |
| 2  | Hogar       |

---

Cuando quieras, seguimos con la **Unidad 2.2** o cualquier otro tema que necesites. ¬øQuer√©s que veamos c√≥mo insertar datos o c√≥mo hacer relaciones entre tablas?
